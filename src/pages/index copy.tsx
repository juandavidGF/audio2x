import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Link from 'next/link'
import React, { useState } from 'react'
import { useUser } from '@auth0/nextjs-auth0/client'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

	const { user, error, isLoading } = useUser();
	const [arrTranscription, setArrTranscription] = useState();
	const [transcription, setTranscription] = useState();
	const [summary, setSummary] = useState();
	const [spinner, setSpinner] = useState(false);

	const handleSubmit = async (e) => {
		e.preventDefault();

		const text = e.target.text.value;
		setSpinner(true);
		
		try {
			const arrTranscriptionLocal = await transcribeYTVideo(text);

			summarize(arrTranscriptionLocal);
			
			setSpinner(false);
		} catch (err) {
			console.log('err', err);
			setSpinner(false);
		}
	}

	const transcribeYTVideo = async (text: string) => {
		const res = await fetch('/api/yt-transcribe', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({ link: text, testMode: true }),
		});

		const data = await res.json();
		const arrTranscription = await extractTranscriptions(data);
		
		setTranscription(data);
		setArrTranscription(arrTranscription);

		return arrTranscription;
	}

	const summarize = async (arrTranscriptionLocal) => {

		// console.log('fe#arrTranscriptionLocal', arrTranscriptionLocal);

		const res = await fetch('/api/summarize', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({ document: arrTranscriptionLocal, testMode: true }),
		});
		console.log('res: ', res);
		const summary = await res.json();
		setSummary(summary);
	}

	const extractTranscriptions = async (response) => {
		let extractTranscription = [];
		const prediction = response.prediction;
		for(let item in prediction) {
			extractTranscription.push(prediction[item].time_begin);
			extractTranscription.push(prediction[item].transcription);
		}
		return extractTranscription;
	}


  return (
    <>
      <Head>
        <title>audio2x</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <main className={styles.main}>
				{user ? (<div className={styles.logout}><Link href="/api/auth/logout"><u>Logout</u></Link></div>) : null}
				<h1>Transcribe youtube videos</h1>
				{user ?
					(<div>
						<form onSubmit={handleSubmit}>
							<div className="upload-image">
								<label htmlFor="text">video url: </label>
								<input type="text" id="text" name="text" placeholder='ex: https://www.youtube.com/watch?v=ugIuHWc6Nuc'/>
								<button type="submit">Transcribe</button>
							</div>
						</form>
					</div>)
					: 
					(<div>
						<input type="text" id="text" name="text"/>
						<Link href="/api/auth/login"><button>Transcribe</button></Link>
					</div>)
				}
				{spinner ? (
					<p>Processing ... </p>
				) 
				: null
				}

				<div className={styles.contentTranscription}>
					{summary ? (
						<div>
							<h5>Summary</h5>
							<p>{ summary.text }</p>
						</div>
					) : null
					}
					{transcription ? 
						<div className={styles.transcription}>
							{transcription.prediction.map(item => {
								return (<div key={item.time_begin}>
									<p>{item.time_begin}</p>
									<p>{item.transcription}</p>
									{/* <p>{item}</p> */}
								</div>)
							})}
						</div>
						: null
					}
				</div>
      </main>
    </>
  )
}
